// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "echo_data.proto" (package "echodata", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EchoData } from "./echo_data";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EchoDataReply } from "./echo_data";
import type { EchoDataRequest } from "./echo_data";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service echodata.EchoData
 */
export interface IEchoDataClient {
    /**
     * @generated from protobuf rpc: Unary(echodata.EchoDataRequest) returns (echodata.EchoDataReply);
     */
    unary(input: EchoDataRequest, options?: RpcOptions): UnaryCall<EchoDataRequest, EchoDataReply>;
    /**
     * @generated from protobuf rpc: ServerStream(echodata.EchoDataRequest) returns (stream echodata.EchoDataReply);
     */
    serverStream(input: EchoDataRequest, options?: RpcOptions): ServerStreamingCall<EchoDataRequest, EchoDataReply>;
    /**
     * @generated from protobuf rpc: ClientStream(stream echodata.EchoDataRequest) returns (echodata.EchoDataReply);
     */
    clientStream(options?: RpcOptions): ClientStreamingCall<EchoDataRequest, EchoDataReply>;
    /**
     * @generated from protobuf rpc: Bidi(stream echodata.EchoDataRequest) returns (stream echodata.EchoDataReply);
     */
    bidi(options?: RpcOptions): DuplexStreamingCall<EchoDataRequest, EchoDataReply>;
}
/**
 * @generated from protobuf service echodata.EchoData
 */
export class EchoDataClient implements IEchoDataClient, ServiceInfo {
    typeName = EchoData.typeName;
    methods = EchoData.methods;
    options = EchoData.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Unary(echodata.EchoDataRequest) returns (echodata.EchoDataReply);
     */
    unary(input: EchoDataRequest, options?: RpcOptions): UnaryCall<EchoDataRequest, EchoDataReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoDataRequest, EchoDataReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ServerStream(echodata.EchoDataRequest) returns (stream echodata.EchoDataReply);
     */
    serverStream(input: EchoDataRequest, options?: RpcOptions): ServerStreamingCall<EchoDataRequest, EchoDataReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoDataRequest, EchoDataReply>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ClientStream(stream echodata.EchoDataRequest) returns (echodata.EchoDataReply);
     */
    clientStream(options?: RpcOptions): ClientStreamingCall<EchoDataRequest, EchoDataReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoDataRequest, EchoDataReply>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: Bidi(stream echodata.EchoDataRequest) returns (stream echodata.EchoDataReply);
     */
    bidi(options?: RpcOptions): DuplexStreamingCall<EchoDataRequest, EchoDataReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoDataRequest, EchoDataReply>("duplex", this._transport, method, opt);
    }
}
